

//// CETYS FUTURE ENGINEERS TEAM FINAL CODE FOR THE TURKIYE INTERNATIONAL COMPETITION ////


#include <Wire.h>                                                            // INLCUDE LIBRARIES //
#include <ESP32Servo.h>
#include <MPU6050.h>
#include "HUSKYLENS.h"

HUSKYLENS huskylens;                                                         // NAME VARIABLES //
Servo servo;
MPU6050 mpu;

float ANG = 0;                                                               // GYROSCOPE DATA VARIABLES //
unsigned long lastTime = 0;  
int Lap = 0;
float driftRate;
int x = 0;

int cont = 0;                                                                // BUTTON PINS //
const char button = 13;
bool start = false;  

int ID0 = 0;                                                                 // CAMERA ID VARIABLES //
int ID1 = 1; 
int ID2 = 2; 

const int Trig_US = 14;                                                      // ULTRASONIC PINS //
const int Echo_US1 = 4;
const int Echo_US2 = 16;
const int Echo_US3 = 17;
const int Echo_USAux1 = 33;
const int Echo_USAux2 = 25;

long DisL;                                                                   // ULTRASONIC VARIBABLES //
long DisR;
long DisM;
long DisLA;
long DisRA;

unsigned long lastTurnTime = 0;                                              // VARIABLE TO TRACK THE TIME OF THE LAST TURN //

int IN1 = 2;                                                                 // MOTOR PINS //
int IN2 = 27;
int ENA = 32; 

void setup() {
  
  Serial.begin(115200);
  Wire.begin(21, 22);                                                        // INITIALIZE I2C //
  
  huskylens.begin(Wire);                                                     // SET HUSKYLENS TO COLOR RECOGNITION MODE // 
  huskylens.writeAlgorithm(ALGORITHM_COLOR_RECOGNITION);

  servo.attach(26);
  servo.write(94);

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT); 

  pinMode(Trig_US, OUTPUT);

  pinMode(Echo_US1, INPUT);
  pinMode(Echo_US2, INPUT);
  pinMode(Echo_US3, INPUT);
  pinMode(Echo_USAux1, INPUT);
  pinMode(Echo_USAux2, INPUT);

  pinMode(button,INPUT_PULLUP);

  ledcAttachChannel(ENA, 5000, 8, 2);

  if (!mpu.begin(MPU6050_SCALE_2000DPS, MPU6050_RANGE_2G)) {                 // INITIALIZE MPU6050 //
    Serial.println("Could not find MPU6050");
    while (1);
  }
  
  mpu.calibrateGyro();

  lastTime = millis();

}


void loop() {

  if (digitalRead(button) == HIGH && cont == 0) {                              // START //
    start = true; 
    cont = 1;
    delay(500); 
  }

  if (digitalRead(button) == HIGH && cont == 1) {                              // STOP //
    start = false;        
    cont = 0;
    delay(500); 
  }

  if (start == true){
    OBSTACLE();
    OPEN();
  }

  else{
    STOP();
  }  

}


int DisCalc(int TP, int EP) {                                                // ULTRASONIC BASIC CODE //

  long duration = -1;
  int reading = 120; 
  int cont = 0;

  while (cont < 5) { 
    digitalWrite(TP, LOW);
    delayMicroseconds(2);
    digitalWrite(TP, HIGH);
    delayMicroseconds(10);
    digitalWrite(TP, LOW);

    duration = pulseIn(EP, HIGH, 10000); 

    if (duration > 0) {
      reading = duration * 0.034 / 2; 
      break;  
    }

    cont++;  
  }

  return reading;

}


void printDistances(long distanceLeft, long distanceHleft, long distanceMid, long distanceHright, long distanceRight){

  Serial.print("Dis Left: ");
  Serial.print(distanceLeft);
  Serial.print(" Dis MidLeft: ");
  Serial.print(distanceHleft);
  Serial.print(" Dis Mid: ");
  Serial.print(distanceMid);
  Serial.print(" Dis MidRight: ");
  Serial.print(distanceHright);
  Serial.print(" Dis Right: ");
  Serial.println(distanceRight);

}


void printDistancesM(long distanceMid) {

  Serial.print(" Dis Mid: ");
  Serial.println(distanceMid);

}


float readYawAngle(int X) {                                                  // GYROSCOPE BASIC CODE //

  Vector rawGyro = mpu.readRawGyro();
  float YR = rawGyro.ZAxis / 131.0; 
  
  if (X == 0){
    unsigned long currentTime = millis();
    float dt = (currentTime - lastTime) / 1000.0; 
    lastTime = currentTime; 

    ANG += YR * dt;
    ANG -=   .02;  
  }

  else if (X == 1){
    unsigned long currentTime = millis();
    float dt = (currentTime - lastTime) / 1000.0; 
    lastTime = currentTime; 
  
    ANG += YR * dt;
    ANG +=   0.019;  
  }

  else if (X == 2) {
    unsigned long currentTime = millis();
    float dt = (currentTime - lastTime) / 1000.0; 
    lastTime = currentTime; 
  
    ANG += YR * dt;
    ANG -=   .075;  
  }
  
  return ANG;

}


void OBSTACLE(){

  if (huskylens.request()) {                                                  // OBTAIN DATA FROM HUSKYLENS //
    for (int i = 0; i < huskylens.countBlocks(); i++) {
      HUSKYLENSResult result = huskylens.getBlock(i);
      if (result.ID == 1) {                                                   // ID1 = GREEN //
        GreenO(result.xCenter);
      }
      else if (result.ID == 2) {                                              // ID2 = RED //
        RedO(result.xCenter);
      }
    }
  }

}


void GreenO(int X){                                                           // OBJECT DETECTED IS GREEN //

  Serial.println("Detected Green Object!");

  if (X < 90 ){
    while(X < 90){
      SLIGHTLY_LEFT_MAX();
    } 
  }

  else if(X < 158 && X > 90){
    while(X < 158 && X > 90){
      SLIGHTLY_LEFT();
    } 
  }

  else if(X > 158 && X < 240){
    SLIGHTLY_LEFT_MID();
  }

  else if(X > 240){
    SLIGHTLY_LEFT_MIN();
  }

}

void RedO(int X){                                                             // OBJECT DETECTED IS RED //

  Serial.println("Detected Red Object!");

  if (X < 90 ){
    while(X < 90){
      SLIGHTLY_RIGHT_MIN();
    }
  }

  else if(X < 158 && X > 90){
    while(X < 158 && X > 90){
      SLIGHTLY_RIGHT_MID();
    } 
  }

  else if(X > 158 && X < 240){
    while(X > 158 && X < 240){
      SLIGHTLY_RIGHT();
    }
  }

  else if(X > 240){
    while(X > 240){
      SLIGHTLY_RIGHT_MAX();
    }
  }

}


void STRAIGHT(){                                                              // DIFFERENT VELOCITY CONFIGURATIONS //

  servo.write(93);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  ledcWrite(ENA, 100);  
  delay(10);

}

void STRAIGHT_SLOW(){

  servo.write(94);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  ledcWrite(ENA, 70);  
  delay(10);

}

void RIGHT(){

  servo.write(63);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  ledcWrite(ENA, 90);  
  delay(10);

}

void SLIGHTLY_RIGHT(){

  servo.write(79);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  ledcWrite(ENA, 90); 
  delay(10);

}

void SLIGHTLY_RIGHT_MAX(){

  servo.write(74);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  ledcWrite(ENA, 90);  
  delay(10);

}

void SLIGHTLY_RIGHT_MID(){                     

  servo.write(84);
  digitalWrite(IN1,HIGH);   
  digitalWrite(IN2,LOW);            
  ledcWrite(ENA, 100);  
  delay(10);                

} 

void SLIGHTLY_RIGHT_MIN(){                    

  servo.write(86);
  digitalWrite(IN1,HIGH);   
  digitalWrite(IN2,LOW);         
  ledcWrite(ENA, 100);   
  delay(10);                  

} 

void REVERSE_RIGHT(){

  servo.write(119);
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  ledcWrite(ENA, 100);  
  delay(10);

}

void LEFT(){

  servo.write(125);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  ledcWrite(ENA, 90); 
  delay(10);

}

void SLIGHTLY_LEFT(){

  servo.write(109);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  ledcWrite(ENA, 90); 
  delay(10);

}

void SLIGHTLY_LEFT_MAX(){

  servo.write(114);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  ledcWrite(ENA, 90);  
  delay(10);

}

void SLIGHTLY_LEFT_MID(){                      

  servo.write(104);
  digitalWrite(IN1,HIGH);   
  digitalWrite(IN2,LOW); 
  ledcWrite(ENA, 100);  
  delay(10);
}

void SLIGHTLY_LEFT_MIN(){                   

  servo.write(102);
  digitalWrite(IN1,HIGH);   
  digitalWrite(IN2,LOW);
  ledcWrite(ENA, 100); 
  delay(10);

}

void REVERSE_LEFT(){

  servo.write(69);
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  ledcWrite(ENA, 100);  
  delay(10);

}

void STOP(){

  servo.write(94);
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  ledcWrite(ENA, 0);  
  delay(10);

} 

void CORRECT(int d1, int d2, int d3, int d4){                                 // VEHICLE IS TOO CLOSE TO A WALL //

  if (d1 < d4) {
    if (d1 < 23) {
      SLIGHTLY_RIGHT();
    } 
    else if (d2 < 23) {
      SLIGHTLY_RIGHT();
    }      
  }
  
  else if (d4 < d1) {
    if (d4 < 23) {
      SLIGHTLY_LEFT();
    } 
    else if (d3 < 23) {
      SLIGHTLY_LEFT();
    }  

  }

}


void CORRECT1(float ang) { 
 if (ang > 3)
{
  SLIGHTLY_RIGHT_MIN();
}
else if (ang < -3)
{
  SLIGHTLY_LEFT_MIN();
}

}

void OPEN() {                                                                // OPEN CHALLENGE CODE //
  
  if (Lap <= 11) {
    DisL = DisCalc(Trig_US, Echo_US1);                                       // CALCULATE DISTANCES AND ANGLE //
    delay(5);
    DisM = DisCalc(Trig_US, Echo_US2);
    delay(5);
    DisR = DisCalc(Trig_US, Echo_US3);
    delay(5);
    DisLA = DisCalc(Trig_US, Echo_USAux1);
    delay(5);
    DisRA = DisCalc(Trig_US, Echo_USAux2);
    delay(5);

    printDistances(DisL, DisLA, DisM, DisRA, DisR);

    ANG = readYawAngle(x);
    Serial.print("Angle: ");
    Serial.println(ANG);

    STRAIGHT();

    if ((millis() - lastTurnTime) > 3500) {                                 // CHECK TIME SINCE LAST TURN //
      if ((DisM < 75 && DisL > 85) || (DisM < 75 && DisLA > 85)) {          // LEFT TURN //
        for (;;) {
          x = 1;
          ANG = readYawAngle(x);
          Serial.print("Angle: ");
          Serial.println(ANG);

          if (ANG >= 90.0 || ANG <= -90.0) {
            Serial.println("Turn detected!");
            ANG = 0;  
            Lap++;
            lastTurnTime = millis(); 
            break;
          }

          DisM = DisCalc(Trig_US, Echo_US2);
          delay(5);

          printDistancesM(DisM);

          if (DisM < 14) {
            servo.write(69);
            REVERSE_LEFT();
            delay(1300);
            break;
          }

          LEFT();  
        }
      }

      if ((DisM < 75 && DisR > 85) || (DisM < 75 && DisRA > 85)) {          // RIGHT TURN //
        for (;;) {
          x = 2;
          ANG = readYawAngle(x);
          Serial.print("Angle: ");
          Serial.println(ANG);

          if (ANG >= 90.0 || ANG <= -90.0) {
            Serial.println("Turn detected!");
            ANG = 0;  
            Lap++;
            lastTurnTime = millis();  
            break;
          }

          DisM = DisCalc(Trig_US, Echo_US2);
          delay(5);

          printDistancesM(DisM);

          if (DisM < 14) {
            servo.write(120);
            REVERSE_RIGHT();
            delay(1300);
            break;
          }

          RIGHT();  
        }
      }
    }

    if (DisR < 20 || DisL < 20 || DisRA < 20 || DisLA < 20) {
      CORRECT(DisL, DisLA, DisRA, DisR);
    } else if (ANG > 3 || ANG < -3) {
      CORRECT1(ANG);
    }
  } 
  
  else {
    servo.write(94);
    delay(100);
    STRAIGHT();
    delay(1600);

    for (;;) {
      STOP();
    }
  }

}
