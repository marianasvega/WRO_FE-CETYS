//////// OPEN CHALLENGE FINAL CODE ////////

#include <Servo.h>                                               // DEFINE THE NECESSARY LIBRARIES OR VARIABLES //
Servo servo;

#define SOUND_SPEED_CM_US 0.034
#define LONG_MAX 300
#define LONG_MIN 5

const int Trig_US1 = 10;                                        // SET THE ULTRASONIC PINS //
const int Echo_US1 = 8;
const int Trig_US2 = 9;
const int Echo_US2 = 7;
const int Trig_US3 = 6;
const int Echo_US3 = 13;

const int numSensors = 2;                                       // VARIABLES NEEDED TO CALCUATE DISTANCES //
int TrigPins[numSensors] = {Trig_US1, Trig_US3};
int EchoPins[numSensors] = {Echo_US1, Echo_US3};
long distances[numSensors];
long lastValues[numSensors] = {0, 0};  
long maxDistance[numSensors] = {280, 280};  

int IN1 = 4;                                                    // SET THE MOTOR PINS //
int IN2 = 3; 
int ENA = 5; 

int cont = 0;                                                   // VARIABLE TO START OR END CODE WITH THE BUTTON //
const char buttonPin = 2; 
bool start = false;         

void setup() {                                                  // DEFINE PIN MODES //

  Serial.begin(9600);

  pinMode(IN1, OUTPUT); 
  pinMode(IN2, OUTPUT);    
  pinMode(ENA, OUTPUT);   

  servo.attach(A3); 
  servo.write(90); 

  pinMode(Trig_US1, OUTPUT);
  pinMode(Echo_US1, INPUT);
  
  pinMode(Trig_US2, OUTPUT);
  pinMode(Echo_US2, INPUT);

  pinMode(Trig_US3, OUTPUT);
  pinMode(Echo_US3, INPUT);

  pinMode(buttonPin,INPUT_PULLUP);;

}

void loop() {

if (digitalRead(buttonPin) == HIGH && cont == 0) {              // START //
  start = true; 
  cont = 1;
  delay(500); 
}

if (digitalRead(buttonPin) == HIGH && cont == 1) {              // STOP //
  start = false;        
  cont = 0;
  delay(500); 
}

if (start == true) {                                            // BUTTON IS PRESSED //

  for (int i = 0; i < numSensors; i++) {                        // CALCULATE DISTANCES //
    distances[i] = DisCalc(TrigPins[i], EchoPins[i]);
  }
  long distanceMid = DisCalc(Trig_US2, Echo_US2);  
  printDistances(distances[0], distanceMid, distances[1]);


  if (distanceMid < 90) {                                       // PREPARE FOR A TURN //
    STRAIGHT_SLOW();
  } 
  else {
    STRAIGHT();
  }


  if (distanceMid < 100 && distances[0] > 100) {
    while (distances[0] > 50) {                                 // TURN LEFT //

      for (int i = 0; i < numSensors; i++) {
        distances[i] = DisCalc(TrigPins[i], EchoPins[i]);       // UPDATE DISTANCES //
      }
      distanceMid = DisCalc(Trig_US2, Echo_US2);            
      printDistances(distances[0], distanceMid, distances[1]);

      LEFT();                                                
             
    }
  }
     
  else if (distanceMid < 100 && distances[1] > 110) {
    while (distances[1] > 50) {                                 // TURN RIGHT //

        for (int i = 0; i < numSensors; i++) {
          distances[i] = DisCalc(TrigPins[i], EchoPins[i]);     // UPDATE DISTANCES //
        }
        distanceMid = DisCalc(Trig_US2, Echo_US2);  
        printDistances(distances[0], distanceMid, distances[1]);  

        RIGHT();  
        
    }
  }

  else if(distances[1] < 35 || distances[0] < 35){              // VEHICLE IS TOO CLOSE TO A WALL //
    corregir(distances[0], distances[1]);
  }
      
  else{
    STRAIGHT();
  }

}

else{
  STOP();
}

}


void printDistances(long distanceLeft, long distanceMid, long distanceRight) {
  Serial.print("Dis Left: ");
  Serial.print(distanceLeft);
  Serial.print(" ");
  Serial.print("Dis Mid: ");
  Serial.print(distanceMid);
  Serial.print(" ");
  Serial.print("Dis Right: ");
  Serial.println(distanceRight);
}


int DisCalc(int TP, int EP){                                    // CALCULATE DISTANCES //
  long duration = -1;
  int reading = 0;
  int cont = 0;
  digitalWrite(TP, LOW);

  while ((duration!=0) || (cont <5)){
    delayMicroseconds(2);
    digitalWrite(TP, HIGH);
    delayMicroseconds(10);
    digitalWrite(TP, LOW);
    long duration = pulseIn(EP, HIGH,10000);

    if (duration>0){
      reading = duration * 0.034/2;
    }
    else{
      reading = 120;
    }
 
    return reading;
  }
 
} 

long DisCalchLong(int TP, int EP) {                            // CALCULATE DISTANCES BY GETTING AN AVERAGE //
  const int numReadings = 30;
  long readings[numReadings];  
  long sum = 0;

  for (int i = 0; i < numReadings; i++) {
    digitalWrite(TP, LOW);
    delayMicroseconds(2);
    digitalWrite(TP, HIGH);
    delayMicroseconds(10);
    digitalWrite(TP, LOW);

    long duration = pulseIn(EP, HIGH);
    readings[i] = duration * 0.034 / 2;
    sum += readings[i]; 
    delay(5); 
  }

  long minValue = readings[0];
  long maxValue = readings[0];
  for (int i = 1; i < numReadings; i++) {
    if (readings[i] < minValue) {
      minValue = readings[i];
    }
    if (readings[i] > maxValue) {
      maxValue = readings[i];
    }
  }

  sum -= minValue;
  sum -= maxValue;
  long average = sum / (numReadings - 2);
  return average;

}


void STRAIGHT(){                                              // VEHICLE MOVES STRAIGHT FORWARD //
  servo.write(90);
  digitalWrite(IN1,LOW);   
  digitalWrite(IN2,HIGH);
  analogWrite(ENA,250);                                       // SET SPEED FOR THE MOTOR //
  delay(10);
} 

void STRAIGHT_SLOW(){                                         // VEHICLE MOVES STRAIGHT BUT SLOWER //
  servo.write(90);
  digitalWrite(IN1,LOW);   
  digitalWrite(IN2,HIGH);
  analogWrite(ENA,60);                                        // SET SPEED FOR THE MOTOR //
  delay(10);
} 

void RIGHT(){                                                 // VEHICLE SWERVES RIGHT //
  servo.write(60);
  digitalWrite(IN1,LOW);   
  digitalWrite(IN2,HIGH);   
  analogWrite(ENA,110);                                       // SET SPEED FOR THE MOTOR //
  delay(10);
} 

void LEFT(){                                                  // VEHICLE SWERVES LEFT //
  servo.write(110);
  digitalWrite(IN1,LOW);   
  digitalWrite(IN2,HIGH);   
  analogWrite(ENA,110);                                       // SET SPEED FOR THE MOTOR //
  delay(10);
}

void SLIGHTLY_LEFT(){                                         // VEHICLE SWERVES SLIGHTLY LESS TO THE LEFT //
  servo.write(105);
  digitalWrite(IN1,LOW);   
  digitalWrite(IN2,HIGH);   
  analogWrite(ENA,120);                                       // SET SPEED FOR THE MOTOR //
  delay(10);
}

void SLIGHTLY_LEFT_MID(){                                     // VEHICLE SWERVES SLIGHTLY LESS TO THE LEFT //
  servo.write(100);
  digitalWrite(IN1,LOW);   
  digitalWrite(IN2,HIGH);   
  analogWrite(ENA,120);                                       // SET SPEED FOR THE MOTOR //
  delay(10);
}

void SLIGHTLY_LEFT_MIN(){                                     // VEHICLE SWERVES SLIGHTLY LESS TO THE LEFT //
  servo.write(95);
  digitalWrite(IN1,LOW);   
  digitalWrite(IN2,HIGH);   
  analogWrite(ENA,120);                                       // SET SPEED FOR THE MOTOR //
  delay(10);
}

void SLIGHTLY_RIGHT(){                                        // VEHICLE SWERVES SLIGHTLY LESS TO THE RIGHT //
  servo.write(75);
  digitalWrite(IN1,LOW);   
  digitalWrite(IN2,HIGH);              
  analogWrite(ENA,120);   
  delay(10);                                                  // SET SPEED FOR THE MOTOR //

} 

void SLIGHTLY_RIGHT_MID(){                                    // VEHICLE SWERVES SLIGHTLY LESS TO THE RIGHT //
  servo.write(80);
  digitalWrite(IN1,LOW);   
  digitalWrite(IN2,HIGH);              
  analogWrite(ENA,120);   
  delay(10);                                                  // SET SPEED FOR THE MOTOR //

} 

void SLIGHTLY_RIGHT_MIN(){                                    // VEHICLE SWERVES SLIGHTLY LESS TO THE RIGHT //
  servo.write(85); 
  digitalWrite(IN1,LOW);   
  digitalWrite(IN2,HIGH);              
  analogWrite(ENA,120);   
  delay(10);                                                  // SET SPEED FOR THE MOTOR //

} 

void STOP(){                                                  // VEHICLE STOPS COMPLETELY//
  servo.write(90);
  digitalWrite(IN1,LOW);   
  digitalWrite(IN2,LOW);  
  analogWrite(ENA,0);
  delay(10);
}

void corregir(int d1, int d3){                                // VEHICLE IS TOO CLOSE TO A WALL //
 if (d1 < d3) {
    if (d1 < 15) {
      SLIGHTLY_RIGHT();
    } 

    else if (d1 < 30) { 
      SLIGHTLY_RIGHT_MID();
    } 

    else if (d1 < 35) {  
      SLIGHTLY_RIGHT_MIN();  
    } 

    else if(d1 > 35){
      SLIGHTLY_LEFT();
    }    

    else {
      STRAIGHT();
    }
  } 

  else if (d3 < d1) {
    if (d3 < 15) {
      SLIGHTLY_LEFT();
    } 

    else if (d3 < 30) {
      SLIGHTLY_LEFT_MID();
    } 

    else if (d3 < 35) {
      SLIGHTLY_LEFT_MIN();
    } 
   
    else {
      STRAIGHT();
    }
  }
  
}
